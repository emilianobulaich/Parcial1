#ifndef CLIENTEYPEDIDO_H_
#define CLIENTEYPEDIDO_H_

struct{
	 int idCliente;
	 char nombreEmpresa[51];
	 char localidad[25];
	 char cuit[12];
	 char direccion[21];
	 int isEmpty;
}typedef Clientes;

struct{
	int idRecoleccion;
	int idCliente;
	int cantidadPedidosPendientes;
	int cantidadPedidosCompletados;
	int estado;
	float kilos;
	int isEmpty;
}typedef Recoleccion;

/// \brief Para indicar que todas las posiciones del array están vacías, esta función pone la bandera (isEmpty) en TRUE en todas las posiciones del array.
/// \param listado Clientes* puntero al array de los clientes
/// \param len int tamaño del array
/// \return int Return (-1) si hay error [tamaño invalido o puntero nulo] - (0) si esta Ok
int InicializarClientes(Clientes* listado, int len);

/// \brief Para indicar que todas las posiciones del array están vacías, esta función pone la bandera (isEmpty) en TRUE en todas las posiciones del array.
/// \param listado Recoleccion* puntero al array de los pedidos del cliente
/// \param len int tamaño del array
/// \return int Return (-1) si hay error [tamaño invalido o puntero nulo] - (0) si esta Ok
int InicializarPedidos(Recoleccion* cliente, int len);
void PedirCliente(Clientes* listado, int idCliente, int len);

/// \brief Agrega en un array de clientes existente los valores recibidos como parámetro en la primer posición libre.
/// \param list Clientes*
/// \param len int
/// \param id int
/// \param name[] char
/// \param lastName[] char
/// \param salary float
/// \param sector int
/// \return int Return (-1) si hay error [tamaño invalido o puntero nulo o sin espacios libres] - (0) si esta Ok
int AniadirCliente(Clientes* listado, int len, int id, char nombreEmpresa[],char cuit[],char direccion[], char localidad[]);
int EncontrarClientePorId(Clientes* listado, int len,int id);
void ModificarCliente( Clientes* listado, int len, int id);
int EliminarCliente(Clientes* listado, int len, int id);
int CrearPedido(Clientes* listado, Recoleccion* listadoRecoleccion, int len,  int idRecoleccion);
void ImprimirClientes(Clientes* listado, int len);
void MostrarListadoPorCliente(Clientes* listado, Recoleccion* listadoRecoleccion, int len);
void MostrarListadoPorPedidoPendiente(Clientes* listado, Recoleccion* listadoRecoleccion, int len);
void MostrarListadoPorPedidoCompletado(Clientes* listado, Recoleccion* listadoRecoleccion, int len);
void MostrarPedidoPorLocalidad(Clientes* listado,Recoleccion* listadoRecoleccion,int len);
void CambiarEstadoPedido(Clientes* listado ,Recoleccion* listadoRecoleccion, int len , float* acumuladorPolipropileno);
void CalcularPromedio(Clientes* listado,Recoleccion* listadoRecoleccion,int len, float polipropileno);


#endif /* CLIENTEYPEDIDO_H_ */



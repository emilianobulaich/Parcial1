#include "Output.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include "Cliente.h"
#define TRUE 0
#define FALSE 1


void MostrarMenu (void){
	    printf("------------------> MENU <------------------");
	    printf("\n***************************************\n");
		printf("          Elija una opcion: \n");
		printf("*****************************************\n");
		printf("|  1. Alta de Cliente                   |\n");
		printf("|  2. Modificar datos del Cliente    	|\n");
		printf("|  3. Baja de cliente                   |\n");
		printf("|  4. Crear pedido de Recoleccion    	|\n");
		printf("|  5. Procesar residuos              	|\n");
		printf("|  6. Imprimir Clientes     	     	|\n");
		printf("|  7. Imprimir Pedidos pendientes    	|\n");
		printf("|  8. Imprimir Pedidos procesados    	|\n");
		printf("|  9. Pedidos por localidad             |\n");
		printf("|  10. Promedio de propileno reciclado  |\n");
		printf("|  11. Salir                            |\n");
		printf("*****************************************\n");
}
void Opcion (void){
	printf("\nOpcion: ");
}
ScanearRespuesta(int respuesta){
	switch (respuesta) {
	    			case 1:
	    				idInicial++;
	    				PedirCliente(listado,idInicial,TAM);
	    				break;
	    			case 2:
	    				printf("¿Que cliente quiere modificar? Elegir por ID: ");
	    				scanf("%d",&idModificar);
	    				ModificarCliente(listado,TAM,idModificar);
	    				break;

	    			case 3:
	    				printf("¿Que cliente quiere eliminar? Elegir por ID:");
	    				scanf("%d",&idEliminar);
	    				EliminarCliente(listado,TAM,idEliminar);


	    				break;
	    			case 4:
	    				idRecoleccion++;
	    				ImprimirClientes(listado, TAM);


						CrearPedido(listado,cliente,TAM,idRecoleccion);

	                    break;
	    			case 5:
	    				CambiarEstadoPedido(listado,cliente,TAM,&cantidadPolipropileno);
	    				break;
	    			case 6:

	    				MostrarListadoPorCliente(listado,cliente,TAM);

	    				break;
	    			case 7:
	    				MostrarListadoPorPedidoPendiente(listado,cliente,TAM);
	    				break;
	    			case 8:

	    				MostrarListadoPorPedidoCompletado(listado,cliente,TAM);
	    				break;
	    			case 9:


	    				MostrarPedidoPorLocalidad(listado,cliente,TAM);
	    				break;
	    			case 10:

	    				CalcularPromedio(listado,cliente,idInicial,cantidadPolipropileno);

	    				break;

	    		}
}


void ImprimirClientes(Clientes* listado, int len){
	if(listado != NULL && len >= 0){
		for(int i = 0; i < len; i++){
			if(listado[i].isEmpty == FALSE){

				printf("ID: %d\n",listado[i].idCliente);
				printf("Nombre empresa: %s\n",listado[i].nombreEmpresa);
				printf("Cuit: %s\n",listado[i].cuit);
				printf("Localidad: %s \n",listado[i].localidad);
				printf("Direccion: %s\n",listado[i].direccion);

			}

		}
	}
	else{
		printf("ERROR");
	}

}
//4
int CrearPedido(Clientes* listado, Recoleccion* listadoRecoleccion, int len,  int idRecoleccion){
     int retorno = -1;

     int idCliente;
     float kilos;




			printf("¿A que cliente quiere añadirle un pedido?");

			scanf("%d",&idCliente);
			printf("¿De cuantos kilos es el pedido?");

			scanf("%f",&kilos);
			 if(listado != NULL && listadoRecoleccion != NULL && len >= 0 && idCliente >=0 && idRecoleccion >= 0 ){
				 retorno = 0;
					 for(int i = 0; i < len; i++){
						 if(listadoRecoleccion[i].isEmpty == TRUE && listado[i].idCliente == idCliente){

							 listadoRecoleccion[i].idCliente = idCliente;
							 listadoRecoleccion[i].idRecoleccion = idRecoleccion;
							 listadoRecoleccion[i].kilos = kilos;
							 listadoRecoleccion[i].cantidadPedidosPendientes = 1;
							 listadoRecoleccion[i].estado = 1;
							 listadoRecoleccion[i].isEmpty = FALSE;

							 break;
						 }
						 else if(listadoRecoleccion[i].isEmpty == FALSE && listado[i].idCliente == idCliente){
							 listadoRecoleccion[i].cantidadPedidosPendientes++;
						 }
					 }

			 }
     	return retorno;

}
//6
void MostrarListadoPorCliente(Clientes* listado, Recoleccion* listadoRecoleccion, int len){
   	if(listado != NULL && listadoRecoleccion != NULL && len ){
   		for(int i = 0; i < len; i++){
				if(listado[i].isEmpty == FALSE && listadoRecoleccion[i].isEmpty == FALSE){
				printf("ID: %d \n",listado[i].idCliente);
				printf("ID Recoleccion: %d \n",listadoRecoleccion[i].idRecoleccion);
				puts(listado[i].cuit);
				printf("Cantidad de pedidos pendientes : %d\n ",listadoRecoleccion[i].cantidadPedidosPendientes);

				}
   		}
   	}
   	else{
   		printf("ERROR");
   	}
 }
//7) Imprimir Pedidos pendientes: Se imprimirá una lista de los pedidos que se encuentren en estado
//“Pendiente” con la información: Cuit del cliente, dirección del cliente, cantidad de kilos a recolectar.
void MostrarListadoPorPedidoPendiente(Clientes* listado, Recoleccion* listadoRecoleccion, int len){
	if(listado != NULL && listadoRecoleccion != NULL && len >=0  ){
		for(int i = 0; i < len; i++){
			if(listadoRecoleccion[i].isEmpty == FALSE && listadoRecoleccion[i].estado == 1){
				printf("ID: %d\n",listado[i].idCliente);
				printf("ID RECOLECCION: %d\n",listadoRecoleccion[i].idRecoleccion);
				printf("Cuit: %s\n",listado[i].cuit);
				printf("Localidad: %s \n",listado[i].localidad);
				printf("Direccion: %s\n",listado[i].direccion);
				printf("Kilos: %f \n",listadoRecoleccion[i].kilos);
                printf("Estado: PENDIENTE \n");


				}
		}
	}
}
//8
void MostrarListadoPorPedidoCompletado(Clientes* listado, Recoleccion* listadoRecoleccion, int len){
	if(listado != NULL && listadoRecoleccion != NULL && len >=0){
			for(int i = 0; i < len; i++){
				if(listadoRecoleccion[i].isEmpty == FALSE && listadoRecoleccion[i].estado == 0){
					printf("ID: %d\n",listado[i].idCliente);
					printf("ID RECOLECCION: %d\n",listadoRecoleccion[i].idRecoleccion);
					printf("Cuit: %s\n",listado[i].cuit);
					printf("Localidad: %s \n",listado[i].localidad);
					printf("Direccion: %s\n",listado[i].direccion);
					printf("Kilos: %f \n",listadoRecoleccion[i].kilos);
	                printf("Estado: COMPLETADO \n");


				}

			}
		}
	else{
   		printf("ERROR");
   	}
}
//5 NO HAY DUDA
void CambiarEstadoPedido(Clientes* listado ,Recoleccion* listadoRecoleccion, int len , float* acumuladorPolipropileno){


    if(listado != NULL && listadoRecoleccion != NULL && len >= 0){

		int idRecoleccion;
		float kilosTotales;

		float cantidadPolietilenoBaja;
		float cantidadPolietilenoAlta;
		float cantidadPolipropileno;
		float basura;

		MostrarListadoPorPedidoPendiente(listado,listadoRecoleccion,len);
		printf("Que ID RECOLECCION que desea separar en residuos \n ");
		scanf("%d",&idRecoleccion);
		for(int i = 0; i < len; i++){

			 if(listadoRecoleccion[i].idRecoleccion == idRecoleccion && listadoRecoleccion[i].estado == 1){
				   kilosTotales = listadoRecoleccion[i].kilos;
				   listadoRecoleccion[i].estado = 0;
				   listadoRecoleccion[i].cantidadPedidosPendientes = 0;


			 }

		 }

		cantidadPolipropileno = IngresarFlotante("Ingrese la cantidad de Polipropileno" , 0 ,kilosTotales);
		kilosTotales -=  cantidadPolipropileno;
		cantidadPolietilenoBaja =IngresarFlotante("Ingrese la cantidad de Polietileno de Baja densidad" , 0 ,kilosTotales);
		kilosTotales -= cantidadPolietilenoBaja;
		cantidadPolietilenoAlta =IngresarFlotante("Ingrese la cantidad de Polietileno de Alta densidad" , 0 ,kilosTotales);
		kilosTotales -= cantidadPolietilenoAlta;
		basura = kilosTotales;
		printf("La cantidad de basura desechada es de: %.2f\n",basura);
		*acumuladorPolipropileno += cantidadPolipropileno;

		printf("PEDIDO COMPLETADO ");

    }else{
    	printf("ERROR");
    }





}
float IngresarFlotante(char mensaje[] ,float numMin ,float numMax){
	setbuf(stdout, NULL);

	float num;

	do{
	printf("%s entre %f y %f:",mensaje,numMin,numMax);
	fflush(stdin);
	scanf("%f",&num);
	}while(num < numMin || num > numMax);

    return num;
}
//9
void MostrarPedidoPorLocalidad(Clientes* listado,Recoleccion* listadoRecoleccion,int len){
	  if(listado != NULL && listadoRecoleccion != NULL && len >= 0){
			int contador = 0;
			char localidadABuscar[25];
			printf("Ingresar localidad a buscar");
			fflush(stdin);
			gets(localidadABuscar);

			for(int i = 0; i < len; i++){
				 if(strcmp(listado[i].localidad, localidadABuscar) == 0 && listadoRecoleccion[i].estado == 1){

					contador += listadoRecoleccion[i].cantidadPedidosPendientes;
				 }
			 }
			printf("Los estados pendientes son: %d \n",contador);
	  }
}
//10
void CalcularPromedio(Clientes* listado,Recoleccion* listadoRecoleccion,int len, float polipropileno){
	if(listado != NULL && listadoRecoleccion != NULL && len >= 0 && polipropileno>=0){
		float resultado;
    	resultado = polipropileno / (float)len;
        printf("El promedio de kilos de polipropileno por cliente es de : %.2f \n",resultado);
    }
	else{
		printf("Datos cargados con error");
	}

}





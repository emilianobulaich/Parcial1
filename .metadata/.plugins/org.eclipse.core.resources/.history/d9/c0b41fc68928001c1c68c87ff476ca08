/*Ejercicio 8-2:
Una empresa importadora que comercializa productos Apple, decide registrar de sus productos
los siguientes datos:
idProducto (numerico)
descripcion (alfanumérico)
nacionalidad (numérico, por el momento utilizaremos un define: EEUU - CHINA - OTRO)
tipo (numérico, por el momento utilizaremos un define: IPHONE -MAC - IPAD - ACCESORIOS)
precio (numérico decimal)
Realizar un programa que permita interactuar con un menú de usuarios con las siguientes opciones:
ALTA Producto: Se ingresan los datos de UN solo producto. Siempre y
cuando haya espacio disponible en el array.
//////////////

BAJA Producto: A partir del ingreso del ID. Si existe el producto desaparece de la lista,
dejando espacio disponible para un nuevo producto.

MODIFICACIÓN Producto: A partir del ingreso del ID. Si existe se podrá modificar el precio o el tipo.
LISTADO Productos.
LISTADO ordenado por precio.
LISTADO ordenado por descripción.

*/
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <string.h>
#include "input.h"

#define TAM 5
#define EMPTY 0
#define FULL 1
#define IPHONE 1
#define MAC 2
#define IPAD 3
#define ACCESORIOS 4
#define EEUU 1
#define CHINA 2
#define OTRO 3
#define TAMAL 0
#define TABIEN 1

typedef struct
{
	int idProducto;
	char descripcion[100];
	int nacionalidad;
	int tipo;
	float precio;
	int isEmpty;

} eProducto;

int CargarProducto(eProducto lista[], int tam);
void MostrarListadoProductos(eProducto lista[], int tam);
void OrdenarListaProductosPorId(eProducto lista[], int tam);
void MostrarProducto(eProducto unProducto);
eProducto IngresarUnProducto();
void InicializarListaProducto(eProducto lista[], int tam);
int BuscarPrimerEspacioLibre(eProducto lista[], int tam);
//int BuscarProductoPorId(int idProducto, eProducto lista[], int tam);
int BorrarProductoGuardado(eProducto lista[], int tam);
int ModificarProductoGuardado(eProducto lista[], int tam);
void OrdenarProductoPorPrecio(eProducto lista[],int tam);
void OrdenarListaProductosPorDescripcion(eProducto lista[], int tam);
int ListadoProductosIphone(eProducto lista[], int tam);


int main(void)
{
    int opcion;
    int retornoFuncion;
	setbuf(stdout, NULL);

	eProducto listaProductos[TAM] = {{1000,"Iphone 12",1,1,1000,FULL},{2000,"Macbook Air",1,1,1200,FULL},{5000,"MagSafe",1,1,50,FULL},{2500,"Ipad 5",3,3,750,FULL},{4000,"Ipad 3",2,3,400,FULL}};
	//eProducto listaProductos[TAM];
    //InicializarListaProducto(listaProductos,TAM);
do{

    printf("1. Alta\n");
    printf("2. Mostrar\n");
    printf("3. Borrar producto\n");
    printf("4. Modificar Producto\n");
    printf("5. Ordenado Por Precio\n");
    printf("6. Ordenado Por Descripcion\n");
    printf("7. Listado de Iphone de EEUU\n");

    opcion = IngresarEntero("Elija una opcion ewe\n");

    switch(opcion){
        case 1:
        retornoFuncion = CargarProducto(listaProductos, TAM);
        if(retornoFuncion != -1){
        	puts("El producto se cargo exitosamente\n");
        }else{
        	puts("El producto no pudo cargarse\n");
        }
        break;
        case 2:
        MostrarListadoProductos(listaProductos, TAM);
        break;
        case 3:
        retornoFuncion=BorrarProductoGuardado(listaProductos, TAM);
        if(retornoFuncion==1)
        {
            printf("El producto se borro exitosamente.\n");
        }
        else
        {
            printf("no se pudo borrar el producto.\n");
        }

        break;

        case 4:
        retornoFuncion = ModificarProductoGuardado(listaProductos,TAM);

        if(retornoFuncion==1)
        {
            printf("El producto se modifico Correctamente.\n");
        }
        else
        {
            printf("No se pudo modificar el producto con exito.\n");
        }

        break;

        case 5:
               OrdenarProductoPorPrecio(listaProductos,TAM);
               printf("Se ordeno Correctamente\n");

        break;
         case 6:
               OrdenarListaProductosPorDescripcion(listaProductos,TAM);
               printf("Se ordeno Correctamente\n");

        break;
        case 7:
               retornoFuncion = ListadoProductosIphone(listaProductos, TAM);
               if(retornoFuncion == TAMAL)
               {
                   printf("No se encontraron Iphone de EEUU\n");
               }
        break;

    }

}while(opcion!=10);

	//CargarProductos(listaProductos, TAM);
	/*
	MostrarListadoProductos(listaProductos, TAM);
	printf("Lista Ordenada\n");
	OrdenarListaProductosPorId(listaProductos, TAM);
	MostrarListadoProductos(listaProductos, TAM);
	*/
	return EXIT_SUCCESS;
}

int CargarProducto(eProducto lista[], int tam)
{
	int index = BuscarPrimerEspacioLibre(lista, tam);
	   if(index != -1)
	   {
	      lista[index] = IngresarUnProducto();
	   }
	return index;
}

void OrdenarListaProductosPorId(eProducto lista[], int tam)
{
	eProducto auxiliarProducto;
	for(int i=0; i<tam-1; i++)
	{
		for(int j=i+1; j<tam; j++)
		{
			if(lista[i].idProducto<lista[j].idProducto)
			{
				auxiliarProducto = lista[i];
				lista[i] = lista[j];
				lista[j] = auxiliarProducto;
			}
		}
	}
}

void OrdenarProductoPorPrecio(eProducto lista[],int tam)
{
    eProducto auxiliarProducto;
	for(int i=0; i<tam-1; i++)
	{
		for(int j=i+1; j<tam; j++)
		{
			if(lista[i].precio>lista[j].precio)
			{
				auxiliarProducto = lista[i];
				lista[i] = lista[j];
				lista[j] = auxiliarProducto;
			}
		}
	}
}

void OrdenarListaProductosPorDescripcion(eProducto lista[], int tam)
{
	eProducto auxiliarProducto;
	for(int i=0; i<tam-1; i++)
	{
		for(int j=i+1; j<tam; j++)
		{
			if(strcmp(lista[i].descripcion, lista[j].descripcion)>0)
			{
				auxiliarProducto = lista[i];
				lista[i] = lista[j];
				lista[j] = auxiliarProducto;
			}
		}
	}
}

void MostrarListadoProductos(eProducto lista[], int tam)
{
	int flagListaVacia = 0;
	printf("Id\tDescripcion\tNacionalidad\tTipo\tPrecio\n");
	for (int i = 0; i < tam; i++)
	{
		if(lista[i].isEmpty == FULL){
			MostrarProducto(lista[i]);
		}else{
			if(flagListaVacia == 0){
				puts("Listado de productos vacia.\n");
				flagListaVacia = 1;
			}

		}
	}
}
void MostrarProducto(eProducto unProducto)
{
	printf("%4d %20s %4d %4d %4.2f\n", unProducto.idProducto, unProducto.descripcion,
			unProducto.nacionalidad, unProducto.tipo, unProducto.precio);
}

eProducto IngresarUnProducto(){
    eProducto producto;
	producto.idProducto=IngresarEntero("Ingresa el id del producto");
    getString(producto.descripcion,"Ingresar la descripcion del producto", 100);
	producto.nacionalidad=IngresarEntero("Ingresa la nacionalidad del producto, 1.EEUU, 2.China, 3.Otro: ");
	producto.tipo=IngresarEntero("Ingresa el tipo del producto, 1.Iphone, 2.Mac, 3.Ipad, 4.Accesorios: ");
	producto.precio=IngresarFlotante("Ingresa el precio del producto");
    producto.isEmpty = FULL;

	return producto;
}

void InicializarListaProducto(eProducto lista[], int tam)
{
    for(int i = 0;i < tam; i++)
    {
        lista[i].isEmpty = EMPTY;
    }
}
int BuscarPrimerEspacioLibre(eProducto lista[], int tam){
	int i;
	int index;

	index = -1;
	for(i = 0; i<tam; i++){
		if(lista[i].isEmpty == EMPTY)
		{
			index = i;
			break;
		}
	}
	return index;
}
/*int BuscarProductoPorId(int idProducto,eProducto lista[], int tam){

}
*/
int BorrarProductoGuardado(eProducto lista[], int tam){
	int i;
	int auxiliarProductoGuardado = 0;
	int productoSeleccionado;
	MostrarListadoProductos(lista, tam);

	productoSeleccionado = IngresarEntero("Ingrese el producto a borrar");

	for(i=0; i<tam; i++)
	{
	    if(lista[i].isEmpty==FULL&&lista[i].idProducto==productoSeleccionado)
	    {
	        lista[i].isEmpty=EMPTY;
	        auxiliarProductoGuardado=1;
	        break;
	    }
	}
	return auxiliarProductoGuardado;
}


int ModificarProductoGuardado(eProducto lista[], int tam)
{
    int i;
    int productoSeleccionado;
    float precioAcambiar;
    int retorno;
    retorno = 0;

    productoSeleccionado = IngresarEntero("Ingrese el producto por ID a modificar");

    for(i=0;i<tam;i++)
    {
        if(lista[i].isEmpty==FULL&&lista[i].idProducto==productoSeleccionado)
        {
            precioAcambiar= IngresarFlotante("Ingrese nuevo precio.");
            lista[i].precio = precioAcambiar;
            retorno = 1;
            break;
        }
    }

    return retorno;


}


int ListadoProductosIphone(eProducto lista[], int tam)
{
    int retorno = TAMAL/*0*/;
    //int flagListaVacia = 0;
	printf("Id\tDescripcion\tNacionalidad\tTipo\tPrecio\n");
	for (int i = 0; i < tam; i++)
	{
		if(lista[i].isEmpty == FULL&& lista[i].tipo == IPHONE/*1*/ && lista[i].nacionalidad == EEUU/*1*/){
			MostrarProducto(lista[i]);
			retorno = TABIEN/*1*/;
		}

	}


	return retorno;
}


